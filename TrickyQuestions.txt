1. Write a program to Swap two numbers without using temporary variable.

Note : The file/class should be named as "swapWithNoTemp" with appropriate file extension.

Conditions : 
X, Y any finite positive value 

Input Format :
X - first value 
Y - second value

Output Format : 
X - value of X after swap
Y - value of Y after swap

Sample IO : 
Test Case:
Input :  
2
15

Output :
15
2

Test Case2:
Input :  
23
45

Output :
45
23

2. Write a program to determine whether a given number X is a part of the Fibonacci Sequence. [0,1,1,2,3,5...]

Note : The file/class should be named as "IsFibonacciNum" with appropriate file extension.

Conditions : 
0 <= X <= 1000 

Input Format :
Input consists of only one Integer which is X.

Output Format : 
Print True if X is present in the Fibonacci series. Print False if X is not present.

Sample IO : 
Test Case1:
Input :  
	8

Output:
	True

Test Case2:
Input :  
	233

Output :
	True

Test Case3:
Input :  
	4123

Output :
	False

Test Case4:
Input :  
	17711

Output :
	True

3. Write a C program to find the largest prime factor of a given number 'X'.

Note : The file/class should be named as "LargestPrimeFactor" with appropriate file extension.

Conditions : 
0 <= X <= 1000 

Input Format :
The first line of input consists of only one Integer which is X.

Output Format : 
Output consists of a single line which is the largest prime factor of the given input 'X'. 

Test Case1:
Input: 
	6
Output: 
	3

Test Case2:
Input: 
	15
Output: 
	5

Test Case3:
Input: 
	127
Output: 
	127

Test Case4:
Input: 
	287
Output: 
	41

4. Write a C program to check whether a number 'X' is palindrome or not.

Note : The file/class should be named as "IsPalindromeNum" with appropriate file extension.

Conditions : 
0 <= X <= 9999999 

Input Format :
The first line of input consists of only one Integer which is X.

Output Format : 
Print True if X is a palindrome number. Print False if X is not a palindrome number.

Test Case1:
Input:
	1001
Output:
	True

Test Case2:
Input:
	1021
Output:
	False
	
Test Case3:
Input: 
	12321
Output:
	True

Test Case4:
Input: 
	123432
Output:
	False

5. Write a C program to convert the given number to its roman numeral.

Note : The file/class should be named as "ToRomanNum" with appropriate file extension.

Conditions : 
0 <= X <= 10000

Input Format :
The first line of input consists of only one Integer which is X.

Output Format : 
Print the Roman Numeral corresponding to X.

Test Case1:
Input : 
	9
Output : 
	IX

Test Case2:
Input : 
	40
Output : 
	XL

Test Case3:
Input :  
	1904
Output : 
	MCMIV

6. Write a program to multiply the number 'X' by 'Y' without using * operator.

Note : The file/class should be named as "TrickyMultiply" with appropriate file extension.

Conditions : 
-1000 <= X <= 1000
-1000 <= Y <= 1000

Input Format :
The first line of input consists of an Integer which is X.
The second line of input consists of an Integer which is Y.

Output Format : 
Print the product of X and Y calculated without using * sign.

Test Case1:
Input : 
	4
	7
Output: 
	28

Test Case2:
Input : 
	10
	7
Output: 
	70

Test Case3:
Input : 
	24
	13
Output: 
	312	
	
Test Case4:
Input : 
	-52
	77
Output: 
	-4004	
	
7. Write a C program to Count the number of Trailing Zeros in integer using bitwise operators.

Note : The file/class should be named as "TrailingZeroes" with appropriate file extension.

Conditions : 
0 <= X <= 99999

Input Format :
The first line of input consists of an Integer which is X.

Output Format : 
Print the number of trailing zeros in the binary format of 'X'.

Test Case1:
Input :
	60
Output :
	2

Test Case2:
Input :
	156
Output :
	2

Test Case3:
Input :
	22920
Output :
	3

Test Case4:
Input :
	512
Output :
	9

8. Given a positive integer n, the problem is to print if the number has first and last bits as the only set bits.

Note : The file/class should be named as "EnclosedByOne" with appropriate file extension.

Conditions : 
0 <= X <= 99999

Input Format :
The first line of input consists of an Integer which is X.

Output Format : 
Print "Yes" if the number has first and last bits as the only set bits else print "No".

Test Case1:
Input : 9
Output : Yes
(9)10 = (1001)2, only the first and
last bits are set.

Test Case2:
Input : 15
Output : No
(15)10 = (1111)2, except first and last
there are other bits also which are set.

Test Case3:
Input : 657
Output : No

Test Case4:
Input : 513
Output : Yes

9. Write a C program to divide a given number 'X' (Dividend) by 'Y' (Divisor) without using '/' and '–' operators

Note : The file/class should be named as "TrickyDivide" with appropriate file extension.

Conditions : 
-1000 <= X <= 1000
-1000 <= Y <= 1000
X >= Y

Input Format :
The first line of input consists of an Integer which is X (Dividend).
The second line of input consists of an Integer which is Y (Divisor).

Output Format : 
Print the Quotient of X divided by Y calculated without using '/', '-' signs.

Test Case1:
Input : 
	-11
	3
Output : 
	-3

Test Case2:
Input : 
	10
	10
Output : 
	1

Test Case3:
Input :
	-6
	-2
Output : 
	3
	
Test Case4:
Input :
	325
	15
Output : 
	21

10. Write a program given a positive fractional number n, round-off this number to a given no. of significant digits, d.

Note : The file/class should be named as "RoundOffFloat" with appropriate file extension.

Conditions : 
0.000000 < n <= 1000.000000
d > 0

Input Format :
The first line of input consists of an fractional number which is n.
The second line of input is of an Integer which is d.

Output Format : 
Print the number n rounded off by d digits.

Test Case1:
Input : 
	139.5912
    4
Output : 
	139.6

Test Case2:
Input : 
	24.07182
    5
Output : 
	24.072

Test Case3:
Input :
	33.57
    2
Output :
	34

11. Write a c program to find if a given number 'X' is even or odd without using % operator

Note : The file/class should be named as "EvenOrOdd" with appropriate file extension.

Conditions : 
0 <= X <= 99999

Input Format :
The first line of input consists of an Integer 'X'.

Output Format : 
Print "Even" if 'X' is an even number. Print "Odd" if 'X' is an odd number.

Test Case1:
Input:
	121
Output: 
	Odd

Test Case2:
Input: 
	232
Output: 
	Even

Test Case3:
Input: 
	23485
Output: 
	Odd

Test Case4:
Input: 
	9132
Output: 
	Even
	
12. Given a number n, print the following pattern without using any loop.

Note : The file/class should be named as "NumSeries01" with appropriate file extension.

Conditions : 
1<= n <=1000

Input Format :
Single integer value 'n'

Output Format : 
number series with the following pattern

Test Case1:
Input :
16

Output : 
16 11 6 1 -4 1 6 11 16

Test Case2:
Input : 
10

Output : 
10 5 0 5 10

Test Case3:
Input : 
31

Output : 
31 26 21 16 11 6 1 -4 1 6 11 16 21 26 31
  
13. Write a program to check if two numbers are equal without using arithmetic operators or comparison operators.

Note : The file/class should be named as "CheckIfEqual" with appropriate file extension.

Conditions : 
0 <= X <= 99999
0 <= Y <= 99999

Input Format :
The first line of input consists of an Integer 'X'.
The second line of input consists of an Integer 'Y'.

Output Format : 
Print "Equal" if X=Y else print "Not equal".

Test Case1:
10
10
Equal

Test Case2:
10
20
Not equal

Test Case3:
17
17
Equal

Test Case4:
17
27
Not equal