-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               5.6.43-log - MySQL Community Server (GPL)
-- Server OS:                    Win32
-- HeidiSQL Version:             10.1.0.5464
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


-- Dumping database structure for codedriver
CREATE DATABASE IF NOT EXISTS `codedriver` /*!40100 DEFAULT CHARACTER SET latin1 */;
USE `codedriver`;

-- Dumping structure for table codedriver.problempool
CREATE TABLE IF NOT EXISTS `problempool` (
  `ID` varchar(30) NOT NULL,
  `pblmName` varchar(50) NOT NULL,
  `question` text NOT NULL,
  `description` text NOT NULL,
  `complexity` varchar(50) NOT NULL,
  `pblmType` varchar(30) NOT NULL,
  `pblmTags` tinytext,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `pblmName` (`pblmName`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dumping data for table codedriver.problempool: ~55 rows (approximately)
/*!40000 ALTER TABLE `problempool` DISABLE KEYS */;
INSERT INTO `problempool` (`ID`, `pblmName`, `question`, `description`, `complexity`, `pblmType`, `pblmTags`) VALUES
	('pattern01', 'starPatternNormal', 'Write a program to print star pattern ', '    *\n  ***\n*****', 'EASY', 'SELF', NULL),
	('pattern02', 'oneOnePattern', 'Decode the pattern', 'Given a pattern as below and an integer n your task is to decode it and print nth row of it. The pattern follows as :\n11\n121\n1331\n14641\n\nNote : Save the file / class as “oneOnePattern” with appropriate file extension.\n\nInput:\nThe first line of input is the number of test cases .  Then T test cases follow . The first line of each test case is an integer N.\n\nOutput:\nFor each test case print the required nth row of the pattern.\n\nConstraints:\n1<=T<=20\n1<=N<=20\n\nExample:\nInput:\n2\n2\n4\nOutput:\n11\n121\n11\n121\n1331\n14641\n', 'EASY', 'SELF', NULL),
	('ps-array-01', 'missingNumber', 'Find the Missing Number', 'You are given a list of n-1 integers and these integers are in the range of 1 to n. There are no duplicates in list. One of the integers is missing in the list. Write an efficient code to find the missing integer. If no number is missing print -1.\n\nFile / Class name should be "missingNumber".\n\nInput Format :\nN - size of the array\n\'N\' integer values\n\nOutput Format : \nSingle integer which is missing in the array\n\nSample IO : \nInput :  \n7\n1 2 4 6 3 7 8\n\nOutput :\n5', 'EASY', 'SELF', NULL),
	('ps-array-02', 'nonRepeatNum', 'Print the unique element which is not repeated.', 'There is an integer array with duplicate elements. Print the unique element which is not repeated. If more than one elements are found unique print the one with the least value.\n\nFile / Class name should be "nonRepeatNum".\n\nInput Format :\nN - size of the array\n\'N\' integer values\n\nOutput Format : \nSingle integer from the array which is the unique number\n\nSample IO : \nInput : \n9\n1 1 2 2 3 4 4 5 5 \n\nOutput : \n3 ', 'MEDIUM', 'SELF', NULL),
	('ps-array-03', 'kthSmallest', 'Find the k-th smallest element', 'How to find kth smallest element in an unsorted array?\nYou are given an unsorted array of numbers and k, you need to find the kth smallest number in the array.\n\nOne way to solve this problem is to sort the array in ascending order then pick the k-1th element, that would be your\nkth smallest number in array because array index starts at zero, but can you do better?\n\nFile / Class name should be "kthSmallest".\n\nInput Format :\nN - size of the array\n\'N\' integer values\nk - smallest number corresponding to the index in ascending order.\n\nOutput Format : \nSingle integer from the array which is the unique number\n\nSample IO : \nInput : \n6\n10 2 5 3 9 4\n2 \n\nOutput : \n3', 'MEDIUM', 'SELF', NULL),
	('ps-array-04', 'commonElements', 'How to find common elements in three sorted array?', 'Given three arrays sorted in non-decreasing order, print all common elements in these arrays.\n\nFile / Class name should be "commonElements".\n\nInput Format :\nN1 - size of the array1\n\'N1\' integer values\n\nN2 - size of the array2\n\'N2\' integer values\n\nN3 - size of the array3\n\'N3\' integer values\n\nOutput Format : \nSet of integers common to the above arrays.\n\nInput : \n6\n1 5 10 20 40 80\n5\n6 7 20 80 100\n8\n3 4 15 20 30 70 80 120\n\nOutput : \n20 80', 'MEDIUM', 'SELF', NULL),
	('ps-array-05', 'firstRepeating', 'Find the first repeating element in an array of integers.', 'Given an array of integers, find the first repeating element in it. We need to find the element that occurs more than once and whose index of the first occurrence is smallest.\n\nFile / Class name should be "firstRepeating".\n\nInput Format :\nN - size of the array\n\'N\' integer values\n\nOutput Format : \nSingle integer from the array which is the first-repeating\n\nInput:  \n7\n10 5 3 4 3 5 6\n\nOutput: \n5', 'MEDIUM', 'SELF', NULL),
	('ps-array-06', 'subArrayZero', 'How to find if there is a sub array with sum equal to zero?', 'Here you are given an array of positive and negative numbers, find if there is a sub-array of continuous elements with 0 sum.\n\nFile / Class name should be "subArrayZero".\n\nInput Format :\nN - size of the array\n\'N\' integer values\n\nOutput Format : \ntrue - if sum of any sub-array of continuous elements is zero\nfalse - otherwise\n\nInput :\n5 \n4 2 -3 1 6\n\nOutput: \ntrue ', 'MEDIUM', 'SELF', NULL),
	('ps-array-07', 'arrayRevInPlace', 'How to reverse an array in place?', 'You need to write a program which accepts an integer array and your program needs to reverse that array in place, which means you cannot use additional buffer or array, but one or two variables will be fine. \n\nOf course you cannot use any open source library or method to directly solve this problem and you should not print the array in reverse directly. You need to create your own logic\n\nFile / Class name should be "arrayRevInPlace".\n\nInput Format :\nN - size of the array\n\'N\' integer values\n\nOutput Format : \nInput array in reverse order\n\nInput : \n7\n10 5 3 4 3 5 6\n\nOutput :\n6\n5\n3\n4\n3\n5\n10', 'EASY', 'SELF', NULL),
	('ps-array-08', 'valueInIndex', 'Rearrange an array such that arr[i] = i', 'Given an array of elements of length N, ranging from 1 to N. All elements may not be present in the array. If element is not present then there will be -1 present in the array. Rearrange the array such that A[i] = i and if i is not present, display -1 at that place.\nFile / Class name should be "valueInIndex".\n\nInput Format :\nN - size of the array\n\'N\' integer values\n\nOutput Format : \nInput array in proper arrangement\n\nInput : \n6\n6 1 9 3 2 4\n\nOutput : \n-1 \n1 \n2 \n3 \n4 \n-1 \n6 \n-1 \n-1 \n9', 'MEDIUM', 'SELF', NULL),
	('ps-array-09', 'arrangeOneZero', 'Segregate 0s and 1s in an array', 'You are given an array of 0s and 1s in random order. Segregate 0s on left side and 1s on right side of the array. Traverse array only once.\nFile / Class name should be "arrangeOneZero".\n\nInput Format :\nN - size of the array\n\'N\' integers(0 or 1)\n\nOutput Format : \nInput array in left-right arrangement\n\nInput :\n10\n0 1 0 1 0 0 1 1 1 0\n \nOutput :\n0 0 0 0 0 1 1 1 1 1 ', 'EASY', 'SELF', NULL),
	('ps-array-10', 'rotateArrayNTimes', 'Rotate Array', 'Given an unsorted array arr[] of size N, rotate it by D elements (anti-clockwise). \n\nNote : Save the file / class as “rotateArrayNTimes” with appropriate file extension.\n\nInput: \nThe first line of the input contains T denoting the number of testcases. First line of eacg test case contains two space separated elements, N denoting the size of the array and an integer D denoting the number size of the rotation. Subsequent line will be the N space separated array elements.\n\nOutput: \nFor each testcase, in a new line, output the rotated array.\n\nConstraints:\n1 <= T <= 200\n1 <= N <= 107\n1 <= D <= N\n0 <= arr[i] <= 105\n\nExample:\nInput:\n2\n5 2\n1 2 3 4 5 \n10 3\n2 4 6 8 10 12 14 16 18 20\n\nOutput:\n3 4 5 1 2\n8 10 12 14 16 18 20 2 4 6\n\nExplanation :\nTestcase 1: 1 2 3 4 5  when rotated by 2 elements, it becomes 3 4 5 1 2\n', 'MEDIUM', 'SELF', NULL),
	('ps-array-11', 'greatOnRight', 'Greater on right side', 'You are given an array A of size N. Replace every element with the next greatest element (greatest element on its right side) in the array. Also, if there is no element next to the last element, replace it with -1.\n\nNote : Save the file / class as “greatOnRight” with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. T testcases follow. Each test-case contains two lines of input. The first line is N, the size of tha array. The second line contains N space separated integers.\n\nOutput:\nFor each test-case, print the modified array.\n\nConstraints:\n1 <= T <= 50\n1 <= N <= 100\n1 <= Ai <= 1000\n\nExample:\nInput:\n2\n6\n16 17 4 3 5 2\n4\n2 3 1 9\n\nOutput:\n17 5 5 5 2 -1\n9 9 9 -1\n\nExplanation:\nTestcase1: For 16 the greatest element on its right is 17. For 17 it\'s 5. For 4 it\'s 5. For 3 it\'s 5. For 5 it\'s 2. For 2 it\'s -1(no element to its right). So the answer is 17 5 5 5 2 -1', 'MEDIUM', 'SELF', NULL),
	('ps-array-12', 'maxProductInArray', 'Maximum product of two numbers', 'Given an array with all elements greater than or equal to zero. Return the maximum product of two numbers possible.\n\nNote : Save the file / class as “maxProductInArray” with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases.\nThe first line of each test case is N, size of array. The second line of each test case contains array elements.\n\nOutput:\nPrint the maximum product of two numbers possible.\n\nConstraints:\n1 = T = 100\n2 = N = 107\n0 = A[i] = 104\n\nExample:\nInput:\n2\n5\n1 100 42 4 23\n3\n20 30 40\n\nOutput:\n4200\n1200\n\nExplanation:\nTestcase 1: Two maximum numbers are 100 and 42 and their product is 4200.\n', 'MEDIUM', 'SELF', NULL),
	('ps-array-13', 'SortNumArrayByFreq', 'Sorting Elements of an Array by Frequency', 'Given an array A[] of integers, sort the array according to frequency of elements. That is elements that have higher frequency come first. If frequencies of two elements are same, then smaller number comes first.\n\nNote : The file/class should be named as "SortNumArrayByFreq" with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.\n\nOutput:\nFor each test-case, in a new line, print each sorted array in a separate line. For each array its numbers should be separated by space.\n\nConstraints:\n1 <= T <= 70\n30 <= N <= 130\n1 <= Ai <= 60 \n\nExample:\nInput 1:\n2\n5\n5 5 4 6 4\n5\n9 9 9 2 5\n\nOutput 1:\n4 4 5 5 6\n9 9 9 2 5\n\nExplanation:\nTestcase1: The highest frequency here is 2. Both 5 and 4 have that frequency. Now since the frequencies are same then smaller element comes first. So 4 4 comes first then comes 5 5. Finally comes 6.\nThe output is 4 4 5 5 6.', 'MEDIUM', 'SELF', NULL),
	('ps-array-14', 'birdFreq', 'Write a program to find frequency of migrating birds sighting', 'You have been asked to help study the population of birds migrating across the continent. \nEach type of bird you are interested in will be identified by an integer value. \nEach time a particular kind of bird is spotted, its id number will be added to your array of sightings. \nYou would like to be able to find out which type of bird is most common given a list of sightings. \nYour task is to print the type number of that bird and if two or more types of birds are equally common, choose the type with the smallest ID number.\nFor example, assume your bird sightings are of types arr=[1,1,2,2,3]. There are two each of types 1 and 2 , and one sighting of type 3. Pick the lower of the two types seen twice: type 1.\n\nNote : The file/class should be named as "TimeConversion" with appropriate file extension.\n\nInput Format\nThe first line contains an integer denoting n, the number of birds sighted and reported in the array arr. \nThe second line describes arr as n space-separated integers representing the type numbers of each bird sighted.\n\nConstraints\n5 <= n <= 2*10^5\nIt is guaranteed that each type is 1, 2, 3, 4, or 5.\n\nOutput Format\nPrint the type number of the most common bird; if two or more types of birds are equally common, choose the type with the smallest ID number.\n\nSample Input 0\n6\n1 4 4 4 5 3\n\nSample Output 0\n4\n\nExplanation 0\nThe different types of birds occur in the following frequencies:\nType 1: 1 bird\nType 2: 0 birds\nType 3: 1 bird\nType 4: 3 birds\nType 5: 1 bird\nThe type number that occurs at the highest frequency is type 4, so we print 4 as our answer.', 'MEDIUM', 'SELF', NULL),
	('ps-array-15', 'LongestBinaryGap', 'Write a program to find longest binary gap in a given number.', 'A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.\n\nNote : The file/class should be named as "LongestBinaryGap" with appropriate file extension.\n\nFor example, \nNumber 9 has binary representation 1001 and contains a binary gap of length 2. \nThe number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. \nThe number 20 has binary representation 10100 and contains one binary gap of length 1. \nThe number 15 has binary representation 1111 and has no binary gaps. \nThe number 32 has binary representation 100000 and has no binary gaps.\n\nFor example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. Given N = 32 the function should return 0, because N has binary representation \'100000\' and thus no binary gaps.\n\nWrite an efficient algorithm for the following assumptions:\nN is an integer within the range [1..2,147,483,647].\n\nInput Format : \nInput contains a single line which consists of a single Integer.\n\nOutput Format : \nOutput consists of a single integer.\n\nTest Case 1 :\nInput : \n	125\nOutput : \n	1', 'MEDIUM', 'SELF', NULL),
	('ps-array-16', 'ShareMarketProfit', 'Write a program to calculate profit from a set of share prices.', 'An array A consisting of N integers is given. It contains daily prices of a stock share for a period of N consecutive days. If a single share was bought on day P and sold on day Q, where 0 <= P <= Q < N, then the profit of such transaction is equal to A[Q] ? A[P], provided that A[Q] >= A[P]. \nOtherwise, the transaction brings loss of A[P] ? A[Q].\n\nFor example, consider the following array A consisting of six elements such that:\nA[0] = 23171 A[1] = 21011 A[2] = 21123 A[3] = 21366 A[4] = 21013 A[5] = 21367\n\nIf a share was bought on day 0 and sold on day 2, a loss of 2048 would occur because A[2] ? A[0] = 21123 ? 23171 = ?2048. \nIf a share was bought on day 4 and sold on day 5, a profit of 354 would occur because A[5] ? A[4] = 21367 ? 21013 = 354. \nMaximum possible profit was 356. It would occur if a share was bought on day 1 and sold on day 5.\n\nWrite an efficient algorithm for the following assumptions:\nN is an integer within the range [0..400,000];\neach element of array A is an integer within the range [0..200,000].\n\nNote : The file/class should be named as "ShareMarketProfit" with appropriate file extension.\n\nInput Format : \nFirst line of input consists of a single integer \'N\' which is the size of the array.\nNext \'N\' lines consists of \'N\' integers which are part of array A.\n\nOutput Format : \nOutput consists of a single integer which is the maximum profit that the user can earn.\n\nTest Input 1 : \n	6\n	23187\n	92727\n	231\n	4563\n	123131\n	1311\nOutput:  \n	122900', 'MEDIUM', 'SELF', NULL),
	('ps-array-17', 'SemiPrimeArray', 'Write a program to find the number of semi-prime numbers within a set of ranges.', 'A prime is a positive integer X that has exactly two distinct divisors: 1 and X. The first few prime integers are 2, 3, 5, 7, 11 and 13.\n\nA semi-prime is a natural number that is the product of two (not necessarily distinct) prime numbers. The first few semi-primes are 4, 6, 9, 10, 14, 15, 21, 22, 25, 26.\n\nYou are given two non-empty arrays P and Q, each consisting of M integers. These arrays represent queries about the number of semi-primes within specified ranges.\n\nQuery K requires you to find the number of semi-primes within the range (P[K], Q[K]), where 1 <= P[K] <= Q[K] <= N.\n\nFor example, consider an integer N = 26 and arrays P, Q such that:\nP[0] = 1 Q[0] = 26 P[1] = 4 Q[1] = 10 P[2] = 16 Q[2] = 20\nThe number of semi-primes within each of these ranges is as follows:\n(1, 26) is 10,\n(4, 10) is 4,\n(16, 20) is 0.\n\nWrite an efficient algorithm for the following assumptions:\nN is an integer within the range [1..50,000];\neach element of arrays P, Q is an integer within the range [1..1000];\nP[i] <= Q[i].\n\nNote : The file/class should be named as "SemiPrimeArray" with appropriate file extension.\n\nInput Format : \nFirst line of input consists of a single integer \'N\' which is the size of the array.\nNext 2*N lines consists of N integers which are part of array P and N integers which are part of array Q.\n\nOutput Format : \nOutput consists of a single integer which is the maximum profit that the user can earn.\n\nTest case 1: \n	4\n	1\n	12\n	34\n	23\n	12\n	23\n	67\n	71\nOutput : \n	4 4 12 16', 'MEDIUM', 'SELF', NULL),
	('ps-array-18', 'DominatorElement', 'Write a program to find the dominator element of an array.', 'An array A consisting of N integers is given. The dominator of array A is the value that occurs in more than half of the elements of A.\n\nFor example, consider array A such that\nA[0] = 3 A[1] = 4 A[2] = 3 A[3] = 2 A[4] = 3 A[5] = -1 A[6] = 3 A[7] = 3\n\nThe dominator of A is 3 because it occurs in 5 out of 8 elements of A (namely in those with indices 0, 2, 4, 6 and 7) and 5 is more than a half of 8.\n\nWrite an efficient algorithm for the following assumptions:\nN is an integer within the range [0..100,000];\neach element of array A is an integer within the range [1..2,147,483,647].\n\nNote : The file/class should be named as "DominatorElement" with appropriate file extension.\n\nInput Format : \nFirst line of input consists of a single integer \'N\' which is the size of the array.\nNext N lines consists of N integers which are part of the array A.\n\nOutput Format : \nOutput consists of a single integer which is the dominator of the given array. If no such element is found print -1.\n\nTest case 1: \nInput : \n	10\n	2\n	3\n	2\n	2\n	3\n	3\n	2\n	2\n	2\n	7\nOutput :  \n	2', 'MEDIUM', 'SELF', NULL),
	('ps-array-19', 'ArrayWordPuzzle', 'Word Puzzle', 'Given a 2D board of characters and a word, find if the word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\nFor example, given the following board:\n\n[\n  [\'A\',\'B\',\'C\',\'I\'],\n  [\'S\',\'I\',\'C\',\'S\'],\n  [\'E\',\'D\',\'E\',\'E\']\n]\n\nInput Format :\nInput consists of a single string in UPPER CASE.\n\nOutput Format : \nOutput consists of a single line stating "True" - if the board contains the input string or "False" - if it doesn\'t contain the input string.\n\nNote : The file/class should be named as "ArrayWordPuzzle" with appropriate file extension.\n\nInput 1 :\n	ABCCED\nOutput 1 :\n	True\n\nInput 2 :\n	ABCB\nOutput 2 :\n	False', 'MEDIUM', 'SELF', 'course-era'),
	('ps-array-20', 'LongestConsecutiveSequence', 'Longest consecutive number sequence', 'Given an unsorted array of integers, find the length of the longest consecutive elements sequence.\n\nFor example, given [100, 4, 99, 1, 3, 2, 200], the longest consecutive element sequence is [1, 2, 3, 4]. \nPrint its length: 4.\n\nYour algorithm should run in O(n) complexity.\n\nInput Format :\nFirst line of the input is an integer N which is the size of the array.\nNext N lines of input contains a single integer each representing elements of the array arr[]\n\nOutput Format : \nSingle integer which is the length of the longest consecutive elements sequence.\n\nConstraints : \n2 <= N <= 100\n0 <= arr[i] <= 10000\n\nNote : The file/class should be named as "LongestConsecutiveSequence" with appropriate file extension.\n\nInput 1 :\n	7\n	100\n	4\n	99\n	1\n	3\n	2\n	200\n\nOutput 1 :\n	4', 'MEDIUM', 'SELF', 'microsoft'),
	('ps-array-2d-01', 'addSubMatrix', 'Addition of sub-matrix', 'Given a matrix C of size N x M. You are given position of sub-matrix as X1, Y1 and X2, Y2 inside the matrix. Find the sum of all elements inside that sub-matrix.\n\nNote : Save the file / class as “addSubMatrix” with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. The first line of each test case is n and m,n is the number of rows and m is the number of columns. The second line of each test case contains C[N][M]. The third line contains four value of X1, Y1, X2, Y2. X1, Y1 is the top left cell and X2, Y2 is the bottom right cell.\n\nOutput:\nPrint the sum of all elements inside that sub-matrix.\n\nConstraints:\n1 = T = 15\n1 = N, M = 103\n1 = C[N][M] = 106\n1 <= X1, Y1, X2, Y2 <= M\n\nExample:\nInput:\n2\n5 6\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n3 4 4 5\n3 3\n9 8 7 4 2 1 6 5 3\n1 2 3 3\n\nOutput:\n78\n26\nExplanation:\nTestcase 2: Sum from cell starting at position (1, 2) (1-based indexing) and ending at (3, 3) is 26.\n', 'MEDIUM', 'SELF', NULL),
	('ps-logic-01', 'maxMoney', 'Find the Maximum money', 'Given street of houses (a row of houses), each house having some amount of money kept inside; now there is a thief who is going to steal this money but he has a constraint/rule that he cannot steal/rob two adjacent houses. Find the maximum money he can rob.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases.\nThe first line of each test case is N and money.\n\nOutput:\nPrint maximum money he can rob.\n\nNote : Save the file / class as “maxMoney” with appropriate file extension.\n\nConstraints:\n1 = T = 100\n1 = money = 100\n1 = N = 1000\n\nExample:\nInput:\n2\n5 10\n2 12\n\nOutput:\n30\n12\n', 'EASY', 'SELF', NULL),
	('ps-logic-02', 'stringKeyMapping', 'Keypad typing', 'You are given a string S of alphabet characters and the task is to find its matching decimal representation as on a mobile phone\'s numeric keypad. Output the decimal representation corresponding to the string. For ex: if you are given “amazon” then its corresponding decimal representation will be 262966.\n\nNote : Save the file / class as “stringKeyMapping” with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of a single line containing a string.\n\nOutput:\nFor each test case, print in a new line, the corresponding decimal representation of the given string.\nConstraints:\n1 = T = 100\n1 = length of String = 100\n\nExample:\nInput\n2\nitvaccoding\nvacquiz\n\nOutput\n48822263464\n8227849', 'EASY', 'SELF', NULL),
	('ps-logic-03', 'geeksCoffee', 'Geek and Coffee Shop', 'Geek loves to drink cold coffee after coding for long hours. One fine day a Geek went to his favorite coffee shop in the town and asked for a cup of cold coffee. The shopkeeper told him that he is their lucky customer and had an offer for the Geek. The offer was that for an amount of N they will fill Geek\'s cup with N units of cold coffee and after consuming initial N units of coffee the shopkeeper will again refill his cup with half the amount of coffee that Geek consumed in previous refill, and will keep on refilling his cup by half of the previous cycle till the amount to refill becomes nil i.e. 0 (Assume Geek can consume infinite amount of coffee and shop also has infinite amount coffee). Now Geek is curious to know that how many units of coffee will Geek get for Mth refill. Being Geek\'s friend help him out with his problem.    \n\nNote : Save the file / class as “geeksCoffee” with appropriate file extension.\n\nInput:\nThe first line of the input contains an integer T, denoting the number of test cases. The T test case follow. The only line of each test case contains two space separated integers N and M respectively.\n\nOutput:\nFor each test case output a single integer on a new line denoting the required answer.\n\nConstraints:\n1<=T<=104\n1<=N<=109\n1<=M<=103\n\nExample:\nInput:\n2\n100 4\n10 3\n\nOutput:\n12\n2\n\nExplanation:\nTestCase 1:\nFor the 4th refill geek will get 12 units of the coffee.\n1st Fill: Geek will get 100 units of Coffee\n2nd Fill: 100/2 = 50 units\n3rd Fill: 50/2 = 25 units\n4th Fill: 25/2 = 12 units\n', 'EASY', 'SELF', NULL),
	('ps-logic-04', 'PogoJumpMinimum', 'Pogo Jump 1', 'You are in an infinite 2D grid where you can move in any of the 8 directions:\n\n (x,y) to\n    (x+1, y),\n    (x - 1, y),\n    (x, y+1),\n    (x, y-1),\n    (x-1, y-1),\n    (x+1,y+1),\n    (x-1,y+1),\n    (x+1,y-1)\n	\nYou are given a sequence of points and the order in which you need to cover the points. Give the minimum number of steps in which you can achieve it. You start from the first point.\n\nExample:\n\nInput: [(0, 0), (1, 1), (1, 2)]\nOutput: 2\nMove from (0, 0) to (1, 1) in 1 step(diagonal) and then from (1, 1) to (1, 2) in 1 step (rightwards)\n\nInput Format :\nFirst line of the input is an integer N which is the number of points.\nNext N lines of input contains 2 integers each separated by a space representing x and y of each point.\n\nOutput Format : \nSingle integer which is the length of the longest consecutive elements sequence.\n\nConstraints : \n1 <= N <= 100\n0 <= x,y \n\nNote : The file/class should be named as "PogoJumpMinimum" with appropriate file extension.\n\nInput 1 : \n	3\n	0 0\n	1 1\n	1 2\nOutput 1 :\n	2', 'MEDIUM', 'SELF', 'google'),
	('ps-loops-01', 'countXInRange', 'How Many X\'s?', 'Given an integer X within the range of 0 to 9, and given two positive integers as upper and lower bounds respectively, find the number of times X occurs as a digit in an integer within the range, excluding the bounds. Print the frequency of occurrence as output.\n\nNote : Save the file / class as “countXInRange” with appropriate file extension.  \n\nInput:\nThe first line of input is an integer T, denoting the number of test cases. For each test case, there are two lines of input, first consisting of the integer X, whose occurrence has to be counted. Second, the lower and upper bound, L and U which are positive integers, on the same line separated by a single space, respectively.\n\nOutput:\nFor each test case, there is only one line of output, the count of the occurrence of X as a digit in the numbers lying between the lower and upper bound, excluding them.\n\nConstraints:\n1<=T<=100\n0<=X<=9\n0<L<U<=10^5\n\nExample:\nInput:\n2\n3\n100 250\n0\n20 21\nOutput:\n35\n0\n\nExplanation:\nIn the first test case, the occurrence of 3 in the numbers starting from 101 to 249 is counted and comes out to be 35.\nSimilarly, for all the other test cases, the occurrence of the given number X is printed as output.', 'MEDIUM', 'SELF', NULL),
	('ps-loops-02', 'minDifferencePair', 'Find the Minimum difference pair', 'Given an unsorted array, find the minimum difference between any pair in given array.\n\nNote : Save the file / class as “minDifferencePair” with appropriate file extension.  \n\nInput:\nThe first line of input contains an integer T denoting the number of test cases.\nThe first line of each test case is N, the size of array. Second line of the test case is the Array.\n\nOutput:\nPrint the minimum difference between any two pairs.\n\nConstraints:\n1 <= T <= 30\n1 < N <= 100\n1 <= arr[i] <= 100000\n\nExample:\nInput:\n2\n5\n2 4 5 7 9\n10\n87 32 99 75 56 43 21 10 68 49\n\nOutput:\n1\n6\n\n', 'MEDIUM', 'SELF', NULL),
	('ps-loops-03', 'DivisibleByKInRange', 'Numbers divisible by \'K\' in a range.', 'Write a program that given three integers A, B and K, prints the number of integers within the range [A - B] that are divisible by K.\n\nFor example, for A = 6, B = 11 and K = 2, your function should return 3, because there are three numbers divisible by 2 within the range [6..11], namely 6, 8 and 10.\n\nWrite an efficient algorithm for the following assumptions:\nA and B are integers within the range [0..2,000,000,000];\nK is an integer within the range [1..2,000,000,000];\nA <= B.\n\nNote : The file/class should be named as "DivisibleByKInRange" with appropriate file extension.\n\nInput Format : \nThe first line of input consists of a single Integer A (lower range).\nThe second line of input consists of a single Integer B (upper range).\nThe third line of input consists of a single Integer K.\n\nOutput Format : \nOutput consists of a single integer which is the number of integers divisible by K within the range A-B.\n\nTest Case 1:\nInput : \n	5\n	15\n	6\nOutput : \n	2', 'EASY', 'SELF', NULL),
	('ps-loops-logic-01', 'countSetBits', 'Count total set/one bits', 'You are given a number N. Find the total count of set bits (number of 1s when the number is represented in binary) form for all numbers from 1 to N(both inclusive).\n\nNote : Save the file / class as “countSetBits” with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. T testcases follow. The first line of each test case is N.\n\nOutput:\nFor each testcase, in a new line, print the total count of all bits.\n\nConstraints:\n1 = T = 100\n1 = N = 103\n\nExample:\nInput:\n2\n4\n17\nOutput:\n5\n35\n\nExplanation:\nTestcase1:\nAn easy way to look at it is to consider the number, n = 4:\n0 0 0 = 0\n0 0 1 = 1\n0 1 0 = 1\n0 1 1 = 2\n1 0 0 = 1\nTherefore , the total number of bits is 5.\n', 'MEDIUM', 'SELF', NULL),
	('ps-loops-logic-02', 'genBinaryNos', 'Generate Binary Numbers', 'Given a number N. The task is to generate and print all binary numbers with decimal values from 1 to N.\n\nNote : Save the file / class as “genBinaryNos” with appropriate file extension.\n\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. There will be a single line for each testcase which contains N.\n\nOutput:\nPrint all binary numbers with decimal values from 1 to N in a single line.\n\nConstraints:\n1 = T = 106\n1 = N = 106\n\nExample:\nInput:\n2\n2\n5\n\nOutput:\n1 10\n1 10 11 100 101\n\nExplanation:\nTestcase 1: Binary numbers from 1 to 2 are 1 and 10\n', 'EASY', 'SELF', NULL),
	('ps-strings-01', 'wordTwiceCounter', 'Twice counter', 'Given an array of n words. Some words are repeated twice, we need count such words.\n\nNote : Save the file / class as “wordTwiceCounter” with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an integer n denoting the number of words in the string. The next line contains n space separated words forming the string.\n\nOutput:\nPrint the count of the words which are repeated twice in the string.\n\nConstraints:\n1<=T<=105  \n1<=no of words<=105\n1<=length of each word<=105\n\nExample:\nInput:\n2\n10\nhate love peace love peace hate love peace love peace\n8\nTom Jerry Thomas Tom Jerry Courage Tom Courage\n\nOutput:\n1\n2\n', 'MEDIUM', 'SELF', NULL),
	('ps-strings-02', 'removeStringChars', 'Remove Characters in a String', 'Given two strings s1 and s2, remove those characters from first string which are present in second string. Both the strings are different and contain only lowercase characters.\n\nNote : Save the file / class as “removeStringChars” with appropriate file extension.\n\nInput:\n\nThe first line of input contains an integer T denoting the number of test cases.\nThe first line of each test case is s1,s1 is first string.\nThe second line of each test case contains s2,s2 is second string.\n\nOutput:\n\nPrint the modified string(s1). For each test case, print the output in a new line.\n\nConstraints:\n\n1 = T = 15\n1 = s2 < s1 = 50\n\nExample:\n\nInput:\n2\nitvaccodingteam\ncaw\nremoveccharaterfrom\nstring\n\nOutput:\nitvodingtem\nemovecchaaefom\n', 'MEDIUM', 'SELF', NULL),
	('ps-strings-03', 'manualSubString', 'Implement strstr manually', 'Your task is to implement the function strstr. The function takes two strings as arguments (s,x) and  locates the occurrence of the string x in the string s. The function returns and integer denoting the first occurrence of the string x in s.\n\nNote : Save the file / class as “manualSubString” with appropriate file extension.\n\nInput Format:\nThe first line of input contains an integer T denoting the no of test cases . Then T test cases follow. Each test case has 2 lines of input, first list the search string s and second line the occurrence of string x\n\nOutput Format:\nFor each test case, in a new line, output will be an integer denoting the first occurrence of the x in the string s. Return -1 if no match found.\nNOTE: If there is a match on the first element answer should be 0 and not 1 given that array index starts at 0\n\nConstraints:\n1 <= T <= 100\n1<= |s|,|x| <= 1000\n\nExample:\nInput\n2\nItVACForSuccess \nFr\nITVACForsuccess \nFor\nOutput\n-1\n5\n\nExplanation:\nTestcase 1: Fr is not present in the string ItVACForSuccess as substring.\nTestcase 2: For is present as substring in ITVACForsuccess from index 5 given that array index starts at 0.', 'MEDIUM', 'SELF', NULL),
	('ps-strings-04', 'binaryStartAndEnd', 'Binary String', 'Given a binary string S. The task is to count the number of substrings that start and end with 1. For example, if the input string is “00100101”, then there are three substrings “1001”, “100101” and “101”.\n\nNote : Save the file / class as “binaryStartAndEnd” with appropriate file extension.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. Each test case consist of an integer \'n\' denoting the string length and next line is followed by a binary string.\n\nOutput:\nFor each testcase, in a new line, print the number of substring starting and ending with 1 in a separate line.\n\nConstraints:\n1 = T = 40\n1 = |S| = 1000\n\nExample:\nInput:\n2\n4\n1111\n5\n01101\n\nOutput:\n6\n3\n\nExample:\nTestcase 1: There are 6 substrings from the given string. They are 11, 11, 11, 111, 111, 1111.\nTestcase 2: There 3 substrings from the given string. They are 11, 101, 1101.\n', 'MEDIUM', 'SELF', NULL),
	('ps-strings-05', 'reverseEachWord', 'Reverse each word in a given string', 'Given a String of length N reverse each word in it. Words are separated by spaces. Dot character should not be reversed and should retain its position.\n\nNote : Save the file / class as “reverseEachWord” with appropriate file extension.\n\nInput:\nThe first line contains T denoting the number of testcases. Then follows description of testcases. Each case contains a string containing dots, spaces and characters.\n \nOutput:\nFor each test case, output a String in single line containing the reversed words of the given String.\n\nConstraints:\n1<=T<=10\n1<=Length of String<=2000\n\nExample:\nInput:\n2\ni like this program very much\nhello\n\nOutput:\ni ekil siht margorp yrev hcum\nolleh\n', 'MEDIUM', 'SELF', NULL),
	('ps-strings-06', 'capitalizeFirstLetter', 'Given a String of length N capitalize the first letter of each word in the sentence', 'Given a String of length N capitalize the first letter of each word in the sentence\n\nInput:\nThe first line contains T denoting the number of testcases. Then follows description of testcases. Each case contains a string containing dots and characters.\n \nNote : Save the file / class as “capitalizeFirstLetter” with appropriate file extension.\n\nOutput:\nFor each test case, output a String in single line containing the words of the given String with first letter as upper case (capitals)\n\nConstraints:\n1<=T<=10\n1<=Length of String<=2000\n\n\nExample:\nInput:\n2\ni like this. program very much\n….\nOutput:\nI Like This. Program Very Much\n…\n', 'EASY', 'SELF', NULL),
	('ps-strings-07', 'ExtractNumFromString', 'Extract the Number from the String', 'Benny once had trouble finding the numbers in a string. The numbers are distributed in a string across various test cases.\nThere are various numbers in each test case you need to find the number in each test case. Each test case has various numbers in sequence. You need to find only those numbers which do not contain 9. For eg, if the string contains "hello this is alpha 5051 and 9475".You will extract 5051 and not 9475. You need only those numbers which are consecutive and you need to help him find the numbers.  \n\nNote: Use long long for storing the numbers from the string.\n\nNote : The file/class should be named as "ExtractNumFromString" with appropriate file extension.\n\nInput:\nThe first line consists of T test cases and next T lines contain a string.\nLength of each string S may be between 1 to 1000. \n\nOutput:\nFor each string output the number stored in that string if various numbers are there print the largest one. If a string has no numbers print -1.\n\nConstraints:\n1<=T<=100\n1<=|S|<=1000\n\nExample:\nInput 1:\n	2\n	This is alpha 5057 and 97\n	GSLV F11 was launched in December 19, 2018 \nOutput 1:\n	5057 97\n	11 19 2018', 'MEDIUM', 'SELF', NULL),
	('ps-strings-08', 'ValidParenthesis', 'Valid Parenthesis String', 'Given a string containing only three types of characters: \'(\', \')\' and \'*\', write a function to check whether this string is valid. We define the validity of a string by these rules:\n\nAny left parenthesis \'(\' must have a corresponding right parenthesis \')\'.\nAny right parenthesis \')\' must have a corresponding left parenthesis \'(\'.\nLeft parenthesis \'(\' must go before the corresponding right parenthesis \')\'.\n\'*\' could be treated as a single right parenthesis \')\' or a single left parenthesis \'(\' or an empty string.\nAn empty string is also valid.\n\nNote : The file/class should be named as "ValidParenthesis" with appropriate file extension.\n\nNote:\nThe string size will be in the range [1, 100].\n\nExample:\nInput 1 : \n	3\n	()\n	(*)\n	)(*)\nOutput 1 : \n	True\n	True\n	False', 'MEDIUM', 'SELF', NULL),
	('ps-strings-09', 'TimeConversion', 'Time Conversion', 'Given a time in 12-hour AM/PM format, convert it to military (24-hour) time.\nNote: Midnight is 12:00:00AM on a 12-hour clock, and 00:00:00 on a 24-hour clock. Noon is 12:00:00PM on a 12-hour clock, and 12:00:00 on a 24-hour clock.\n\nNote : The file/class should be named as "TimeConversion" with appropriate file extension.\n\nInput Format\nA single string s containing a time in 12-hour clock format (i.e.: hh:mm:ssAM or hh:mm:ssPM ), where 01<= hh <= 12 and 00 <= mm, ss <= 59.\n\nConstraints\nAll input times are valid\n\nOutput Format\nConvert and print the given time in 24-hour format, where 00 <= hh <= 23.\n\nSample Input 1 : \n07:05:45PM\n\nSample Output 1 :\n19:05:45', 'MEDIUM', 'SELF', NULL),
	('TP01', 'TestProgram', 'Sum of two numbers', 'Write a program to find the sum of two numbers', 'EASY', 'SELF', NULL),
	('trick-swap', 'swapWithNoTemp', 'Write a program to Swap two numbers without using temporary variable.', 'Write a program to Swap two numbers without using temporary variable.\n\nNote : The file/class should be named as "swapWithNoTemp" with appropriate file extension.\n\nConditions : \nX, Y any finite positive value \n\nInput Format :\nX - first value \nY - second value\n\nOutput Format : \nX - value of X after swap\nY - value of Y after swap\n\nSample IO : \nTest Case:\nInput :  \n2\n15\n\nOutput :\n15\n2', 'EASY', 'SELF', NULL),
	('tricky-ques-01', 'IsFibonacciNum', 'Write a program to determine whether a given number X is a part of the Fibonacci Sequence.', 'Write a program to determine whether a given number X is a part of the Fibonacci Sequence. [0,1,1,2,3,5...]\n\nNote : The file/class should be named as "IsFibonacciNum" with appropriate file extension.\n\nConditions : \n0 <= X <= 1000 \n\nInput Format :\nInput consists of only one Integer which is X.\n\nOutput Format : \nPrint True if X is present in the Fibonacci series. Print False if X is not present.\n\nSample IO : \nTest Case1:\nInput :  \n	8\n\nOutput:\n	True', 'EASY', 'SELF', NULL),
	('tricky-ques-02', 'LargestPrimeFactor', 'Write a C program to find the largest prime factor of a given number \'X\'.', 'Write a C program to find the largest prime factor of a given number \'X\'.\n\nNote : The file/class should be named as "LargestPrimeFactor" with appropriate file extension.\n\nConditions : \n0 <= X <= 1000 \n\nInput Format :\nThe first line of input consists of only one Integer which is X.\n\nOutput Format : \nOutput consists of a single line which is the largest prime factor of the given input \'X\'. \n\nTest Case1:\nInput: \n	6\nOutput: \n	3\n\nTest Case2:\nInput: \n	15\nOutput: \n	5', 'MEDIUM', 'SELF', NULL),
	('tricky-ques-03', 'IsPalindromeNum', 'Write a C program to check whether a number \'X\' is palindrome or not.', 'Write a C program to check whether a number \'X\' is palindrome or not.\n\nNote : The file/class should be named as "IsPalindromeNum" with appropriate file extension.\n\nConditions : \n0 <= X <= 9999999 \n\nInput Format :\nThe first line of input consists of only one Integer which is X.\n\nOutput Format : \nPrint True if X is a palindrome number. Print False if X is not a palindrome number.\n\nTest Case1:\nInput:\n	1001\nOutput:\n	True\n\nTest Case2:\nInput:\n	1021\nOutput:\n	False', 'EASY', 'SELF', NULL),
	('tricky-ques-04', 'ToRomanNum', 'Write a C program to convert the given number to its roman numeral.', 'Write a C program to convert the given number to its roman numeral.\n\nNote : The file/class should be named as "ToRomanNum" with appropriate file extension.\n\nConditions : \n0 <= X <= 10000\n\nInput Format :\nThe first line of input consists of only one Integer which is X.\n\nOutput Format : \nPrint the Roman Numeral corresponding to X.\n\nTest Case1:\nInput : \n	9\nOutput : \n	IX\n\nTest Case2:\nInput : \n	40\nOutput : \n	XL', 'MEDIUM', 'SELF', NULL),
	('tricky-ques-05', 'TrickyMultiply', 'Write a program to multiply the number \'X\' by \'Y\' without using * operator.', 'Write a program to multiply the number \'X\' by \'Y\' without using * operator.\n\nNote : The file/class should be named as "TrickyMultiply" with appropriate file extension.\n\nConditions : \n-1000 <= X <= 1000\n-1000 <= Y <= 1000\n\nInput Format :\nThe first line of input consists of an Integer which is X.\nThe second line of input consists of an Integer which is Y.\n\nOutput Format : \nPrint the product of X and Y calculated without using * sign.\n\nTest Case1:\nInput : \n	4\n	7\nOutput: \n	28', 'EASY', 'SELF', NULL),
	('tricky-ques-06', 'TrailingZeroes', 'Write a C program to Count the number of Trailing Zeros in integer using bitwise operators.', 'Write a C program to Count the number of Trailing Zeros in integer using bitwise operators.\n\nNote : The file/class should be named as "TrailingZeroes" with appropriate file extension.\n\nConditions : \n0 <= X <= 99999\n\nInput Format :\nThe first line of input consists of an Integer which is X.\n\nOutput Format : \nPrint the number of trailing zeros in the binary format of \'X\'.\n\nTest Case1:\n60\nNumber of Trailing Zeros = 2\n\nTest Case2:\n156\nNumber of Trailing Zeros = 2', 'EASY', 'SELF', NULL),
	('tricky-ques-07', 'EnclosedByOne', 'Given a positive integer n, the problem is to print if the number has first and last bits as the only set bits.', 'Given a positive integer n, the problem is to print if the number has first and last bits as the only set bits.\n\nNote : The file/class should be named as "EnclosedByOne" with appropriate file extension.\n\nConditions : \n0 <= X <= 99999\n\nInput Format :\nThe first line of input consists of an Integer which is X.\n\nOutput Format : \nPrint "Yes" if the number has first and last bits as the only set bits else print "No".\n\nTest Case1:\nInput : 9\nOutput : Yes\n(9)10 = (1001)2, only the first and\nlast bits are set.\n\nTest Case2:\nInput : 15\nOutput : No\n(15)10 = (1111)2, except first and last\nthere are other bits also which are set.', 'MEDIUM', 'SELF', NULL),
	('tricky-ques-08', 'TrickyDivide', 'Write a C program to divide a given number \'X\' (Dividend) by \'Y\' (Divisor) without using \'/\' and \'–\' operators', 'Write a C program to divide a given number \'X\' (Dividend) by \'Y\' (Divisor) without using \'/\' and \'–\' operators\n\nNote : The file/class should be named as "TrickyDivide" with appropriate file extension.\n\nConditions : \n-1000 <= X <= 1000\n-1000 <= Y <= 1000\nX >= Y\n\nInput Format :\nThe first line of input consists of an Integer which is X (Dividend).\nThe second line of input consists of an Integer which is Y (Divisor).\n\nOutput Format : \nPrint the Quotient of X divided by Y calculated without using \'/\', \'-\' signs.\n\nTest Case1:\nInput : \n	-11\n	3\nOutput : \n	-3\n\nTest Case2:\nInput : \n	10\n	10\nOutput : \n	1', 'EASY', 'SELF', NULL),
	('tricky-ques-09', 'RoundOffFloat', 'Write a program given a positive fractional number n, round-off this number to a given no. of significant digits, d.', 'Write a program given a positive fractional number n, round-off this number to a given no. of significant digits, d.\n\nNote : The file/class should be named as "RoundOffFloat" with appropriate file extension.\n\nConditions : \n0.000000 < n <= 1000.000000\nd > 0\n\nInput Format :\nThe first line of input consists of an fractional number which is n.\nThe second line of input is of an Integer which is d.\n\nOutput Format : \nPrint the number n rounded off by d digits.\n\nTest Case1:\nInput : \n	139.5912\n    4\nOutput : \n	139.6', 'EASY', 'SELF', NULL),
	('tricky-ques-10', 'EvenOrOdd', 'Write a c program to find if a given number \'X\' is even or odd without using % operator', 'Write a c program to find if a given number \'X\' is even or odd without using % operator\n\nNote : The file/class should be named as "EvenOrOdd" with appropriate file extension.\n\nConditions : \n0 <= X <= 99999\n\nInput Format :\nThe first line of input consists of an Integer \'X\'.\n\nOutput Format : \nPrint "Even" if \'X\' is an even number. Print "Odd" if \'X\' is an odd number.\n\nTest Case1:\nInput:\n	121\nOutput: \n	Odd\n\nTest Case2:\nInput: \n	232\nOutput: \n	Even', 'EASY', 'SELF', NULL),
	('tricky-ques-11', 'NumSeries01', 'Given a number n, print the following pattern without using any loop.', 'Given a number n, print the following pattern without using any loop.\n\nNote : The file/class should be named as "NumSeries01" with appropriate file extension.\n\nConditions : \n1<= n <=1000\n\nInput Format :\nSingle integer value \'n\'\n\nOutput Format : \nnumber series with the following pattern\n\nTest Case1:\nInput :\n16\n\nOutput : \n16 11 6 1 -4 1 6 11 16\n\nTest Case2:\nInput : \n10\n\nOutput : \n10 5 0 5 10', 'EASY', 'SELF', NULL),
	('tricky-ques-12', 'CheckIfEqual', 'Write a program to check if two numbers are equal without using arithmetic operators or comparison operators.', 'Write a program to check if two numbers are equal without using arithmetic operators or comparison operators.\n\nNote : The file/class should be named as "CheckIfEqual" with appropriate file extension.\n\nConditions : \n0 <= X <= 99999\n0 <= Y <= 99999\n\nInput Format :\nThe first line of input consists of an Integer \'X\'.\nThe second line of input consists of an Integer \'Y\'.\n\nOutput Format : \nPrint "Equal" if X=Y else print "Not equal".\n\nTest Case1:\n10\n10\nEqual\n\nTest Case2:\n10\n20\nNot equal', 'EASY', 'SELF', NULL);
/*!40000 ALTER TABLE `problempool` ENABLE KEYS */;

-- Dumping structure for table codedriver.testcasepool
CREATE TABLE IF NOT EXISTS `testcasepool` (
  `TCID` varchar(30) NOT NULL,
  `tcName` varchar(50) NOT NULL,
  `tcCount` int(11) NOT NULL DEFAULT '1',
  `pblmIDs` varchar(350) NOT NULL,
  `input1` text NOT NULL,
  `output1` text NOT NULL,
  `sample1` bit(1) NOT NULL DEFAULT b'1',
  `input2` text,
  `output2` text,
  `sample2` bit(1) DEFAULT b'0',
  `input3` text,
  `output3` text,
  `sample3` bit(1) DEFAULT b'0',
  `input4` text,
  `output4` text,
  `sample4` bit(1) DEFAULT b'0',
  `input5` text,
  `output5` text,
  `sample5` bit(1) DEFAULT b'0',
  PRIMARY KEY (`TCID`),
  UNIQUE KEY `tcName` (`tcName`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dumping data for table codedriver.testcasepool: ~55 rows (approximately)
/*!40000 ALTER TABLE `testcasepool` DISABLE KEYS */;
INSERT INTO `testcasepool` (`TCID`, `tcName`, `tcCount`, `pblmIDs`, `input1`, `output1`, `sample1`, `input2`, `output2`, `sample2`, `input3`, `output3`, `sample3`, `input4`, `output4`, `sample4`, `input5`, `output5`, `sample5`) VALUES
	('ARR-ARRANGE-1-0', 'ArrayArrangeOneZero', 2, 'ps-array-09', '[10,0,1,0,1,0,0,1,1,1,0]', '["0 0 0 0 0 1 1 1 1 1 "]', b'1', '[15,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0]', '["0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 "]', b'0', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-BIRD-FREQ', 'ArrayFrequentNum', 2, 'ps-array-14', '[6,1,4,4,4,5,3]', '[4]', b'1', '[11,1,2,3,4,5,4,3,2,1,3,4]', '[3]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-COM-ELMNTS', 'ArrayCommonElements', 2, 'ps-array-04', '[6,1,5,10,20,40,80,5,6,7,20,80,100,8,3,4,15,20,30,70,80,120]', '[20,80]', b'1', '[8,11,15,21,35,44,78,89,110,5,6,7,11,15,100,7,3,4,15,20,30,70,100]', '[15]', b'0', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-FIRST-REPEAT', 'ArrayFirstRepeating', 4, 'ps-array-05', '[7,10,5,3,4,3,5,6]', '[5]', b'1', '[9,1,1,2,2,3,4,4,5,5]', '[1]', b'1', '[11,5,6,11,3,4,1,2,2,3,12,9]', '[3]', b'0', '[18,15,7,11,17,3,13,9,2,5,16,12,1,8,14,6,4,10,4]', '[4]', b'0', NULL, NULL, b'0'),
	('ARR-GREAT-ON-RIGHT', 'ArrayGreaterOnRight', 2, 'ps-array-11', '[2,6,16,17,4,3,5,2,4,2,3,1,9]', '[17,5,5,5,2,-1,9,9,9,-1]', b'1', '[3,8,34,45,93,84,90,11,71,59,15,16,5,40,22,52,24,48,19,62,37,29,12,55,24,11,20,204,287,298,40,151,142,118,144,63,11,74,225,133,146,163,117,184,244,260,88]', '[93,93,90,90,71,71,59,-1,62,62,62,62,62,62,62,62,55,55,55,55,24,11,-1,298,298,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,88,-1]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-KTH-SMALL', 'ArrayKthSmallest', 3, 'ps-array-03', '[6,10,2,5,3,9,4,2]', '[3]', b'1', '[11,25,81,11,3,7,43,2,4,37,12,9,7]', '[12]', b'0', '[18,15,7,11,17,3,13,9,2,5,16,12,1,8,14,6,4,10,18,17]', '[17]', b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-MAX-PRODUCT', 'ArrayMaxProductElements', 2, 'ps-array-12', '[2,5,1,100,42,4,23,3,20,30,40]', '[4200,1200]', b'1', '[4,5,44,33,54,79,23,10,19,37,56,74,83,0,79,82,17,28,20,82,3,11,42,82,6,50,89,100,66,83,12,68,69,66,5,15,20,36,97]', '[4266,6806,9700]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-MIN-DIFF-PAIR', 'ArrayMinDiffPair', 3, 'ps-loops-02', '[2,5,2,4,5,7,9,10,87,32,99,75,56,43,21,49,10,68]', '[1,6]', b'1', '[3,8,13,27,8,41,35,3,11,47,11,89,54,77,31,24,68,19,45,10,49,17,15,15,12,7,3,10,6,1,11,2,8,9,13,4,14,5]', '[2,2,1]', b'1', '[5,25,272,213,334,153,245,338,216,281,379,327,210,309,164,496,171,150,147,335,413,474,450,473,446,306,192,30,137,113,483,61,248,415,372,410,311,405,251,186,167,363,429,218,446,132,356,256,58,150,367,65,492,315,349,236,74,91,35,536,827,585,681,225,662,900,852,569,355,130,724,721,804,334,478,192,833,195,233,797,771,246,87,811,903,802,714,630,105,487,175,498,180,632,10,1103,1369,3680,3771,2582,3452,1238,2569,2355,1576,50,1090,1942,9251,3026,8718,5534,4959,1682,1937,2533,4219,9854,4016,6819,8620,7503,568,1849,6620,360,2198,4367,8433,8904,598,9362,5719,1686,4981,2889,8863,5620,6075,364,4286,8444,5232,4584,2805,7286,6429,7815,6645,1181,1691,1273,9268,5579,3130,5629]', '[1,3,2,13,4]', b'1', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-MISS-NO', 'ArrayMissingNo', 3, 'ps-array-01', '[7,1,2,4,6,3,7,8]', '[5]', b'1', '[11,7,11,3,9,2,5,6,12,1,8,4]', '[10]', b'0', '[18,15,7,11,17,3,13,9,2,5,16,12,1,8,14,6,4,10,18]', '[-1]', b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-NO-REPEAT', 'ArrayNonRepeat', 3, 'ps-array-02', '[9,1,1,2,2,3,4,4,5,5]', '[3]', b'1', '[11,5,1,11,3,5,1,2,2,3,12,9]', '[9]', b'0', '[18,15,7,11,17,3,13,9,2,5,16,12,1,8,14,6,4,10,18]', '[1]', b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-REV-PLACE', 'ArrayReverseInPlace', 3, 'ps-array-07', '[7,10,5,3,4,3,5,6]', '[6,5,3,4,3,5,10]', b'1', '[9,1,1,2,2,3,4,4,5,5]', '[5,5,4,4,3,2,2,1,1]', b'0', '[9,5,6,11,3,4,1,2,12,9]', '[9,12,2,1,4,3,11,6,5]', b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-ROTATE', 'ArrayRotateNTimes', 2, 'ps-array-10', '[2,5,2,1,2,3,4,5,10,3,2,4,6,8,10,12,14,16,18,20]', '[3,4,5,1,2,8,10,12,14,16,18,20,2,4,6]', b'1', '[4,10,3,44,38,46,5,27,15,35,18,47,39,18,8,81,32,5,29,50,10,49,104,77,98,2,74,94,47,0,99,39,58,106,44,53,26,18,19,26,56,23,75,91,43,14,42,54,71,37,26,7,21,8,70,65,64,80,47,90,91,18,16,51,69,83,84,95,55,29,20,102,94,8,40,50,105,39,22,1,49,11,79,6,14,100,54,10,87,44,94,97,90,103,83,32,81,96,0,42,64,72,104,13,57,80,52,88,20,87,80,93,86,32,46,64,80,101,84,53,30,73,30,28,100,103,92,53,99,95,45,54,64,85,16,33,61,68,22,36,87,51,10,16,16,4,68,15,35,53,40,78,14,86,97,80,89,80,99,33,65,100,24,51,18,74,79,66,104,66,26,78,0,64,1,101,53,80,53,25,41,26,79,27,80,11,54,75,67,53,102,20,56,0]', '[5,27,15,35,18,47,39,44,38,46,77,98,2,74,94,47,0,99,39,58,81,32,5,29,50,10,49,104,1,49,11,79,6,14,100,54,10,87,44,94,97,90,103,83,32,81,96,0,42,64,72,104,13,57,80,52,88,20,87,80,93,86,32,46,64,80,101,84,53,30,73,30,28,100,103,92,53,99,95,45,54,64,85,16,33,61,68,22,36,87,53,26,18,19,26,56,23,75,91,43,14,42,54,71,37,26,7,21,8,70,65,64,80,47,90,91,18,16,51,69,83,84,95,55,29,20,102,94,8,40,50,105,39,22,86,97,80,89,80,99,33,65,100,24,51,18,74,79,66,104,66,26,78,0,64,1,101,53,80,53,25,41,26,79,27,80,11,54,75,67,53,102,20,56,0,16,16,4,68,15,35,53,40,78,14]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-SORT-BY-FREQ', 'ArraySortByFreq', 2, 'ps-array-13', '[2,5,5,5,4,6,4,5,9,9,9,2,5]', '["4 4 5 5 6 ","9 9 9 2 5 "]', b'1', '[3,7,3,4,9,5,4,2,3,7,5,4,5,2,4,3,2,15,9,9,2,5,12,5,4,2,3,3,10,4,9,11,15]', '["2 3 3 4 4 5 9 ","2 2 3 4 4 5 5 ","2 2 3 3 4 4 5 5 9 9 9 10 11 12 15 "]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-SUBMATRIX-SUM', 'SubMatrixSum', 2, 'ps-array-2d-01', '[2,5,6,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,3,4,4,5,3,3,9,8,7,4,2,1,6,5,3,1,2,3,3]', '[78,26]', b'1', '[2,4,4,33,71,44,77,50,82,74,26,38,19,70,15,71,87,52,17,1,2,4,3,6,6,33,71,44,77,93,42,50,82,74,26,50,0,38,19,70,15,14,23,71,87,52,17,99,91,68,53,3,63,37,57,12,84,79,50,25,40,2,2,5,5]', '[499,761]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ARR-VAL-INDEX', 'ValueInIndex', 2, 'ps-array-08', '[6,6,1,9,3,2,4]', '[-1,1,2,3,4,-1,6,-1,-1,9]', b'1', '[9, 7,3,15,1,10,9,13,2,4]', '[-1,1,2,3,4,-1,-1,7,-1,9,10,-1,-1,13,-1,15]', b'0', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('BINARY-STRING', 'BinaryStringOneToOne', 2, 'ps-strings-04', '[2,4,"1111",5,"01101"]', '[6,3]', b'1', '[3,7,"1011011",10,"1001100010",17,"11101001100000101"]', '[10,6,28]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('BRKT-BALANCING', 'BracketBalancing', 2, 'ps-strings-08', '[3,"()","(*)",")(*)"]', '["True","True","False"]', b'1', '[3,"(*))","(*()(","(())"]', '["True","False","True"]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('CAP-EACH-WORD', 'CapitaliseEachWord', 2, 'ps-strings-06', '[2,"i like this. program very much","IT-VAC for success"]', '["I Like This. Program Very Much","IT-VAC For Success"]', b'1', '[3,"this connection is not visible","Given a String of length N","...."]', '["This Connection Is Not Visible","Given A String Of Length N","...."]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('COUNT-DIGIT-IN-RANGE', 'CountNumInRange', 3, 'ps-loops-01', '[2,3,100,250,0,20,21]', '[35,0]', b'1', '[3,2,10000,12345,9,899,1000,1,1100,1345]', '[1120,120,398]', b'1', '[5,7,1000,9999,1,345,11852,4,55768,100000,1,1000,100000,9,2500,11800]', '[3700,7105,17243,49699,3760]', b'1', NULL, NULL, b'0', NULL, NULL, b'0'),
	('LOOPS-BINARY-NUMS', 'BinNumsInRange', 2, 'ps-loops-logic-02', '[2,2,5]', '[1,10,1,10,11,100,101]', b'1', '[4,8,11,17,20]', '[1,10,11,100,101,110,111,1000,1,10,11,100,101,110,111,1000,1001,1010,1011,1,10,11,100,101,110,111,1000,1001,1010,1011,1100,1101,1110,1111,10000,10001,1,10,11,100,101,110,111,1000,1001,1010,1011,1100,1101,1110,1111,10000,10001,10010,10011,10100]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('LOOPS-DIV-BY-K', 'DivByKInRange', 5, 'ps-loops-03', '[5,15,6]', '[2]', b'1', '[2,9,1]', '[8]', b'1', '[2,10,2]', '[5]', b'1', '[8,23,4]', '[4]', b'1', '[10,20,8]', '[1]', b'1'),
	('MAX-MONEY-ROB', 'MaxMoneyRobbery', 3, 'ps-logic-01', '[2,5,10,2,12]', '[30,12]', b'1', '[4,4,25,7,13,10,27,17,45]', '[50,52,135,405]', b'1', '[7,99,17,106,8,127,76,248,44,117,38,430,23,841,12]', '[850,424,4864,5456,2242,4945,5052]', b'1', NULL, NULL, b'0', NULL, NULL, b'0'),
	('ONE-ONE-PATTERN', 'OneOnePattern', 2, 'pattern02', '[2,2,4]', '["11","121","11","121","1331","14641"]', b'1', '[3,5,8]', '["11","121","1331","14641","161051","11","121","1331","14641","161051","1771561","19487171","214358881"]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('PAT01', 'SimpleStarPattern', 2, 'pattern01', '[3]', '["  *"," ***","*****"]', b'1', '[6]', '["     *","    ***","   *****","  *******"," *********","***********"]', b'0', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('PS-ARR-CONSEC-SEQ', 'LongestConsecSequence', 2, 'ps-array-20', '[7,100,4,99,1,3,2,200]', '[4]', b'1', '[11,36,41,56,35,44,33,34,92,43,32,42]', '[5]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('PS-ARR-DOMINATOR', 'ArrayDominator', 4, 'ps-array-18', '[8,2,34,33,11,33,44,44,233]', '[-1]', b'1', '[10,2,3,2,3,2,3,2,3,3,2]', '[-1]', b'1', '[10,2,3,2,2,3,3,2,2,2,7]', '[2]', b'1', '[5,13,14,13,11,13]', '[13]', b'1', NULL, NULL, b'0'),
	('PS-ARR-PUZZLE', 'WordInPuzzle', 4, 'ps-array-19', '["ABCCED"]', '["True"]', b'1', '["ABCB"]', '["False"]', b'1', '["SEE"]', '["True"]', b'1', '["SICK"]', '["False"]', b'1', NULL, NULL, b'0'),
	('PS-ARR-SEMI-PRIME', 'SemiPrimeInRanges', 4, 'ps-array-17', '[4,1,12,34,23,12,23,67,71]', '["4 4 12 16 "]', b'1', '[3,1,5,20,12,14,23]', '["4 4 2 "]', b'1', '[4,6,8,12,26,18,81,70,38]', '["5 4 24 5 "]', b'1', '[4,4,2,5,3,13,7,14,9]', '["4 2 4 3 "]', b'1', NULL, NULL, b'0'),
	('PS-ARR-SHARE', 'ShareProfitCalc', 4, 'ps-array-16', '[6,23187,92727,231,4563,123131,1311]', '[122900]', b'1', '[4,200,200,200,200]', '[0]', b'1', '[6,123,754,1543,2413,8575,1231]', '[8452]', b'1', '[6,500,1500,3000,2800,5000,4000]', '[3500]', b'1', NULL, NULL, b'0'),
	('PS-BINARY-GAP', 'LongestBinaryGap', 4, 'ps-array-15', '[125]', '[1]', b'1', '[32]', '[0]', b'1', '[714]', '[2]', b'1', '[305]', '[3]', b'1', NULL, NULL, b'0'),
	('PS-GEEK-COFFEE', 'GeeksCoffee', 2, 'ps-logic-03', '[2,100,4,10,3]', '[12,2]', b'1', '[3,150,6,150,10,220,7]', '[4,0,3]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('PS-KEYPAD-MAPPING', 'StrKeypadMapping', 2, 'ps-logic-02', '[2,"itvaccoding","vacquiz"]', '["48822263464","8227849"]', b'1', '[4,"generators","personalfirewall","exterNALinteRface","StringKeyMapping"]', '["4363728677","7377662534739255","39837625468373223","7874645396277464"]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('PS-LOGIC-OPERATOR', 'MinJumpBwPoints', 2, 'ps-logic-04', '[3,0,0,1,1,1,2]', '[2]', b'1', '[4,4,6,1,2,4,5,10,12]', '[14]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('PS-OPERATOR-LOOP-01', 'CountOnesInRange', 3, 'ps-loops-logic-01', '[2,4,17]', '[5,35]', b'1', '[4,37,45,52,60]', '[93,119,143,176]', b'1', '[4,69,77,94,100]', '[205,231,298,319]', b'1', NULL, NULL, b'0', NULL, NULL, b'0'),
	('REVERSE-WORDS', 'ReverseWordsInString', 2, 'ps-strings-05', '[2,"i like this program very much","hello"]', '["i ekil siht margorp yrev hcum","olleh"]', b'1', '[3,"Reverse each word in a given string without using inbuilt functions","IT-VAC for Success","This connection is not visible on any external interface"]', '["esreveR hcae drow ni a nevig gnirts tuohtiw gnisu tliubni snoitcnuf","CAV-TI rof sseccuS","sihT noitcennoc si ton elbisiv no yna lanretxe ecafretni"]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('STRING-EXTRACT-NUM', 'ExtractIntFromString', 2, 'ps-strings-07', '[2,"This is alpha 5057 and 97","GSLV F11 was launched in December 19, 2018"]', '["5057 97 ","11 19 2018 "]', b'1', '[3,"In 2nd innings India scored 436 runs with 3 more wickets","In winter temperature falls below -4 degree Celsius","Absolute zero is defined as 0 K on the Kelvin scale and –273.15 degrees Celsius on the Celsius scale"]', '["2 436 3 ","-4 ","0 -273.15 "]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('STRING-REM-CHARS', 'RemoveCharsInString', 2, 'ps-strings-02', '[2,"itvaccodingteam","caw","removeccharaterfrom","string"]', '["itvodingtem","emovecchaaefom"]', b'1', '[4,"srishakthi","api","mysqldatabaseworksfine","after","mediumlevelcomplexityisbetter","languagesettings","generateandprintallbinarynumberswithdecimalvalues","secondtestcase"]', '["srshkth","mysqldbswoksin","mdmvcompxybr","grprillbiryumbrwihimlvlu"]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('STRING-TIME-CONV', 'StringTimeConversion', 4, 'ps-strings-09', '["07:05:45PM"]', '["19:05:45"]', b'1', '["12:05:15PM"]', '["12:05:15"]', b'1', '["12:15:00AM"]', '["00:15:00"]', b'1', '["08:30:00AM"]', '["08:30:00"]', b'1', NULL, NULL, b'0'),
	('STRING-WORD-COUNT', 'TwiceWordCountString', 2, 'ps-strings-01', '[2,10,"hate love peace love peace hate love peace love peace",8,"Tom Jerry Thomas Tom Jerry Courage Tom Courage"]', '[1,2]', b'1', '[2,15,"hai sri shakthi welcome to sri shakthi itvac team itvac of cdc coimbatore hello guys",16,"betty botter bought some butter but the butter was bitter so betty botter bought better butter"]', '[3,3]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('STRSTR-MANUAL', 'StrstrManual', 2, 'ps-strings-03', '[2,"ItVACForSuccess","Fr","ITVACForsuccess","For"]', '[-1,5]', b'1', '[2,"WelcomeToSriShakthi","oSr","Hello!There...","the"]', '[8,6]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('SUB-ARR-ZERO', 'SubArraySumZero', 3, 'ps-array-06', '[5,4,2,-3,1,6]', '["true"]', b'1', '[7,1,2,3,-1,5,4,3]', '["false"]', b'1', '[12,1,2,3,-1,5,4,3,8,1,-12,4,11]', '["true"]', b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('TC01', 'SimpleAdd', 2, 'TP01', '[1,2]', '[3]', b'1', '[3,4]', '[7]', b'0', '', '', b'0', '', '', b'0', '', '', b'0'),
	('TRKY-DIVIDE', 'TrickyDivide', 4, 'tricky-ques-08', '[-11,3]', '[3]', b'1', '[10,10]', '[1]', b'1', '[-6,-2]', '[3]', b'1', '[325,15]', '[21]', b'1', NULL, NULL, b'0'),
	('TRKY-EVEN-ODD', 'TrickyEvenOrOdd', 4, 'tricky-ques-10', '[121]', '["Odd"]', b'1', '[232]', '["Even"]', b'1', '[23485]', '["Odd"]', b'1', '[9132]', '["Even"]', b'1', NULL, NULL, b'0'),
	('TRKY-FIBO', 'IsFiboNumber', 4, 'tricky-ques-01', '[8]', '["True"]', b'1', '[233]', '["True"]', b'1', '[4123]', '["False"]', b'1', '[17711]', '["True"]', b'1', NULL, NULL, b'0'),
	('TRKY-IS-EQUAL', 'TrickyIsEqual', 4, 'tricky-ques-12', '[10,10]', '["Equal"]', b'1', '[10,20]', '["Not equal"]', b'1', '[17,17]', '["Equal"]', b'1', '[17,27]', '["Not equal"]', b'1', NULL, NULL, b'0'),
	('TRKY-MULTIPLY', 'MultiplyWoX', 4, 'tricky-ques-05', '[4,7]', '[28]', b'1', '[10,7]', '[70]', b'1', '[24,13]', '[312]', b'1', '[-52,77]', '[-4004]', b'1', NULL, NULL, b'0'),
	('TRKY-NCLOSED-ONE', 'EnclosedByOne', 4, 'tricky-ques-07', '[9]', '["Yes"]', b'1', '[15]', '["No"]', b'1', '[657]', '["No"]', b'1', '[513]', '["Yes"]', b'1', NULL, NULL, b'0'),
	('TRKY-PALINDROME', 'IsPalindromeNum', 4, 'tricky-ques-03', '[1001]', '["True"]', b'1', '[1021]', '["False"]', b'1', '[12321]', '["True"]', b'1', '[123432]', '["False"]', b'1', NULL, NULL, b'0'),
	('TRKY-PRIME-FACTR', 'LargestPrimeFactor', 4, 'tricky-ques-02', '[6]', '[3]', b'1', '[15]', '[5]', b'1', '[127]', '[127]', b'1', '[287]', '[41]', b'1', NULL, NULL, b'0'),
	('TRKY-ROMAN', 'ToRomanNumeral', 3, 'tricky-ques-04', '[9]', '["IX"]', b'1', '[40]', '["XL"]', b'1', '[1904]', '["MCMIV"]', b'1', NULL, NULL, b'0', NULL, NULL, b'0'),
	('TRKY-ROUND-OFF', 'RoundOffFloat', 3, 'tricky-ques-09', '[139.5912,4]', '[139.6]', b'1', '[24.07182,5]', '[24.072]', b'1', '[33.57,2]', '[34]', b'1', NULL, NULL, b'0', NULL, NULL, b'0'),
	('TRKY-SERIES-01', 'NumSeriesFive', 3, 'tricky-ques-11', '[16]', '[16,11,6,1,-4,1,6,11,16]', b'1', '[10]', '[10,5,0,5,10]', b'1', '[31]', '[31,26,21,16,11,6,1,-4,1,6,11,16,21,26,31]', b'1', NULL, NULL, b'0', NULL, NULL, b'0'),
	('TRKY-SWAP', 'SwapWithoutTemp', 2, 'trick-swap', '[2,15]', '[15,2]', b'1', '[23,45]', '[45,23]', b'1', NULL, NULL, b'0', NULL, NULL, b'0', NULL, NULL, b'0'),
	('TRKY-TRAIL-ZEROS', 'TrailingZeros', 4, 'tricky-ques-06', '[60]', '[2]', b'1', '[156]', '[2]', b'1', '[22920]', '[3]', b'1', '[512]', '[9]', b'1', NULL, NULL, b'0');
/*!40000 ALTER TABLE `testcasepool` ENABLE KEYS */;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
