1. Word Puzzle 

This problem was asked by Coursera.

Given a 2D board of characters and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example, given the following board:

[
  ['A','B','C','I'],
  ['S','I','C','S'],
  ['E','D','E','E']
]

Input Format :
Input consists of a single string in UPPER CASE.

Output Format : 
Output consists of a single line stating "True" - if the board contains the input string or "False" - if it doesn't contain the input string.

Note : The file/class should be named as "ArrayWordPuzzle" with appropriate file extension.

Input 1 :
	ABCCED
Output 1 :
	True

Input 2 :
	ABCB
Output 2 :
	False

Input 3 : 
	SEE
Output 3 :
	True
	
Input 4 : 
	SICK
Output 4 :
	False
	
2. Longest consecutive number sequence

This problem was asked by Microsoft.

Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example, given [100, 4, 99, 1, 3, 2, 200], the longest consecutive element sequence is [1, 2, 3, 4]. 
Print its length: 4.

Your algorithm should run in O(n) complexity.

Input Format :
First line of the input is an integer N which is the size of the array.
Next N lines of input contains a single integer each representing elements of the array arr[]

Output Format : 
Single integer which is the length of the longest consecutive elements sequence.

Constraints : 
2 <= N <= 100
0 <= arr[i] <= 10000

Note : The file/class should be named as "LongestConsecutiveSequence" with appropriate file extension.

Input 1 :
	7
	100
	4
	99
	1
	3
	2
	200

Output 1 :
	4
	
Input 2 :
	11
	36
	41
	56
	35
	44
	33
	34
	92
	43
	32
	42

Output 2 :
	5

3. Pogo Jump 1

This problem was asked by Google.

You are in an infinite 2D grid where you can move in any of the 8 directions:

 (x,y) to
    (x+1, y),
    (x - 1, y),
    (x, y+1),
    (x, y-1),
    (x-1, y-1),
    (x+1,y+1),
    (x-1,y+1),
    (x+1,y-1)
	
You are given a sequence of points and the order in which you need to cover the points. Give the minimum number of steps in which you can achieve it. You start from the first point.

Example:

Input: [(0, 0), (1, 1), (1, 2)]
Output: 2
Move from (0, 0) to (1, 1) in 1 step(diagonal) and then from (1, 1) to (1, 2) in 1 step (rightwards)

Input Format :
First line of the input is an integer N which is the number of points.
Next N lines of input contains 2 integers each separated by a space representing x and y of each point.

Output Format : 
Single integer which is the length of the longest consecutive elements sequence.

Constraints : 
1 <= N <= 100
0 <= x,y 

Note : The file/class should be named as "PogoJumpMinimum" with appropriate file extension.

Input 1 : 
	3
	0 0
	1 1
	1 2
Output 1 :
	2
	
Input 2 :
	4
	4 6
	1 2
	4 5
	10 12
Output 2 : 
	14
	
4. Pogo Jump 2

This problem was asked by Pinterest.

Given an integer list where each number represents the number of hops you can make, determine whether you can reach to the last index starting at index 0.

For example, [2, 0, 1, 0] returns True while [1, 1, 0, 1] returns False.

Input Format :
First line of the input is an integer N which is the number of points.
Next N lines of input each contains an integer representing the possible distance of jump from that point.

Output Format : 
Single line - "True" if able to reach the end of the array / "False" if not able to reach the end of the array.

Constraints : 
1 <= N <= 100
0 <= arr[i] <= 10000

Note : The file/class should be named as "PogoJumpToEnd" with appropriate file extension.

Input 1 :
	4
	2
	0
	1
	0
Output 1 :
	True
	
Input 2 :
	4
	1
	1
	0
	1
Output 2 :
	False
	
Input 3 :
	4
	0
	1
	1
	0
Output 3 :
	False
	
5. Write a program to find if a string is the rotated version of another string.

This problem was asked by Google.

Given two strings A and B, return whether or not A can be shifted some number of times to get B.

For example, if A is abcde and B is cdeab, print true.

Input Format :
First line of the input is string A.
Second line of the input is another string B.

Output Format : 
Single line - "True" if it is possible to get string B upon rotating string A by 'n' times otherwise "False".

Constraints : 
1 <= |S| <= 100

Note : The file/class should be named as "IsStringRotated" with appropriate file extension.

Input 1 :
	abcde
	cdeab
Output 1 :
	True
	
Input 2 :
	abc
	acb
Output 2: 
	False

Input 3 : 
	amazon 
	azonam
Output : 
	True

Input 4 : 
	amazon
	omanaz
Output : 
	False
	
	
6. Write a program to swap even and odd bits of a number represented in binary.

This problem was asked by Cisco.

Given an unsigned integer, swap its even and odd bits. The 1st and 2nd bit should be swapped, the 3rd and 4th bit should be swapped, and so on.

For example, 10101010 should be 01010101. 11100010 should be 11010001.

Input Format :
Input consists of a single integer N.

Output Format : 
Single integer of bit-swapped input.

Constraints : 
1 <= N <= 10000

Note : The file/class should be named as "SwapOddEvenBits" with appropriate file extension.

Input 1 : 
	170
Output 1 :
	85
	
Input 2 : 
	226
Output 2 :
	209

Input 3 :
	345		
Output 3 :
	678

7. Reverse words in a sentence.

This problem was asked by Google.

Given a string of words delimited by spaces, reverse the words in string. For example, given "hello world here", return "here world hello"

Taking a mutable string representation, perform this operation in-place.

Input Format :
Input contains a single line which is the input sentence A.

Output Format : 
Input contains a single line which is the reverse form of input sentence A.

Constraints : 
1 <= |S| <= 1000

Note : The file/class should be named as "ReverseSentence" with appropriate file extension.

Input 1 : 
	hello world
Output 1 : 
	world hello

Input 2 : 
	welcome to sri shakthi
Output 2 : 
	shakthi sri to welcome
	
Input 3 : 
	string of words delimited by
Output 3 :
	by delimited words of string
	
8. Square array elements and sort the resulting array.

This problem was asked by Google.

Given a sorted list of integers, square the elements and give the output in sorted order.

For example, given [-9, -2, 0, 2, 3], return [0, 4, 4, 9, 81].

Input Format :
First line of the input is an integer N which is the number of elements in the input array.
Next N lines of input each contains an integer representing the elements of the array.

Output Format : 
Single line of output consisting of N space separated integers.

Constraints : 
1 <= N <= 100
0 <= arr[i] <= 10000

Note : The file/class should be named as "SquareAndSortArray" with appropriate file extension.

Input 1 : 
	5
	-9
	-2
	0
	2
	3
Output 1 :
	0 4 4 9 81

Input 2 :
	6
	-6
	-3
	-1
	2
	4
	5
Output 2 :
	1 4 9 16 25 36
	
Input 3 : 
	5
	-5
	-4
	-2
	0
	1
Output 3 :
	0 1 4 16 25
	
9. Calculate minimum stab spanning all line segments.

This problem was asked by Google.

Given a set of closed intervals, find the smallest set of numbers that covers all the intervals. If there are multiple smallest sets, return any of them.

For example, given the intervals [0, 3], [2, 6], [3, 4], [6, 9], one set of numbers that covers all these intervals is {3, 6}.

Input Format :
First line of the input is an integer N which is the number of elements in the input array.
Next N lines of input each contains 2 space-separated integers representing the start and end points of a line segment.

Output Format : 
Single line of output consisting of N space separated integers.

Constraints : 
1 <= N <= 100
0 <= start, end <= 10000

Note : The file/class should be named as "MinimumStabCalc" with appropriate file extension.

Input 1 : 
	4
	0 3
	2 6
	3 4
	6 9
Output 1 : 
	3 6
	
Input 2 : 
	5
	4 8
	11 13
	1 4
	6 12
	10 15
Output 2 :
	4 11
	
Input 3 :
	6
	0 2
	2 0
	1 2
	1 0
	0 0
	2 1
Output 3 :
	0 1

10. Minimum coin denominations

This problem was asked by Google.

Find the minimum number of coins required to make n cents.

You can use standard American denominations, that is, 1¢, 5¢, 10¢, and 25¢.

For example, given n = 16, return 3 since we can make it with a 10¢, a 5¢, and a 1¢.

Input Format :
First line of the input is an integer n.

Output Format : 
Single integer which is the minimum number of coins.

Constraints : 
1 <= N <= 1000

Note : The file/class should be named as "MinimumCoins" with appropriate file extension.

Input 1 : 
	16
Output 1 :
	3
	
Input 2 :
	90
Output 2 :
	5
	
Input 3 : 
	100
Output 3 :
	4
	
11. Partition the given array based on a pivot value. 

This problem was asked by Amazon.

Given a pivot x, and a list lst, partition the list into three parts.

	The first part contains all elements in lst that are less than x
	The second part contains all elements in lst that are equal to x
	The third part contains all elements in lst that are larger than x Ordering within a part can be arbitrary.

For example, given x = 10 and lst = [9, 12, 3, 5, 14, 10, 10], one partition may be [9, 5, 3, 10, 10, 14, 12].

Input Format :
First line of the input is an integer N which is the number of elements in the input array arr[].
Next N lines of input each contains an integer representing the elements arr[i].
Last line of input is a single integer which corresponds to the pivot value.

Output Format : 
Single line consisting of N space separated integers.

Constraints : 
1 <= N <= 100
0 <= arr[i] <= 10000

Note : The file/class should be named as "ArrayPartition" with appropriate file extension.

Input 1 : 
	7
	9
	12
	3
	5
	14
	10
	10
	10
Output 1 : 
	9 5 3 10 10 14 12
	
Input 2 :
	7
	9 12 3 5 14 10 10
	8
Output 2 : 
	5 3 14 12 10 10 9
	
Input 3 :
	3 
	8
	8
	8
	8
Output 3 : 
	8 8 8

Input 4 :
	2
	3
	5
	8 
Output 4 : 
	5 3
		
	
	
	
	
	
	
	
	
	
	
	













 